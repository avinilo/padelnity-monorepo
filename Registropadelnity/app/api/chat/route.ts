import { GoogleGenerativeAI } from '@google/generative-ai'
import { NextRequest, NextResponse } from 'next/server'

// Inicializar Gemini AI
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '')

// Configuraci√≥n del modelo
const model = genAI.getGenerativeModel({ 
  model: "gemini-2.0-flash-exp",
  generationConfig: {
    temperature: 0.7,
    topP: 0.8,
    topK: 40,
    maxOutputTokens: 1024,
  },
})

// Contextos espec√≠ficos seg√∫n la secci√≥n
const CONTEXTS = {
  auth: `
Eres el asistente virtual oficial de Padelnity, la plataforma l√≠der de torneos de p√°del en Espa√±a. 

INFORMACI√ìN SOBRE PADELNITY:
- Plataforma de registro y gesti√≥n de torneos de p√°del
- Permite a jugadores registrarse, verificar cuentas y participar en torneos
- Ofrece diferentes categor√≠as y niveles de competici√≥n
- Gestiona instalaciones deportivas y horarios
- Sistema de emparejamiento de jugadores y equipos

CONTEXTO ACTUAL: P√ÅGINAS DE AUTENTICACI√ìN
El usuario est√° en las p√°ginas de registro, login, verificaci√≥n de email, cambio de contrase√±a, etc.

TEMAS QUE PUEDES AYUDAR EN ESTA SECCI√ìN:
1. **Registro de cuenta**: Proceso paso a paso, requisitos, verificaci√≥n
2. **Inicio de sesi√≥n**: Problemas de acceso, contrase√±as olvidadas
3. **Verificaci√≥n de email**: C√≥mo verificar, reenv√≠o de emails
4. **Cambio de contrase√±a**: Proceso de recuperaci√≥n y cambio
5. **Problemas t√©cnicos**: Errores en formularios, navegadores compatibles
6. **Informaci√≥n general**: Qu√© es Padelnity, beneficios de registrarse

TU PERSONALIDAD:
- Amigable, profesional y entusiasta del p√°del
- Respuestas claras y concisas para ayudar con el proceso de registro/login
- Siempre positivo y motivador
- Enfocado en resolver problemas de autenticaci√≥n

INSTRUCCIONES:
- Responde SIEMPRE en espa√±ol
- Mant√©n respuestas entre 50-200 palabras
- Usa emojis relacionados con p√°del cuando sea apropiado: üéæ üèÜ üéØ ‚ö° üèüÔ∏è
- Si no sabes algo espec√≠fico, deriva al soporte t√©cnico
- S√© proactivo sugiriendo acciones relacionadas con el registro/login
- FORMATO: Usa markdown para dar formato a tus respuestas:
  * **texto** para negritas en informaci√≥n importante
  * *texto* para cursivas en √©nfasis
  * ‚Ä¢ para listas de puntos
  * [texto](url) para enlaces cuando sea relevante
  * \`c√≥digo\` para t√©rminos t√©cnicos
`,
  dashboard: `
Eres el asistente virtual oficial de Padelnity, especializado en el dashboard de usuario.

CONTEXTO ACTUAL: DASHBOARD DE USUARIO
El usuario ya est√° autenticado y navega por su panel de control.

TEMAS QUE PUEDES AYUDAR EN ESTA SECCI√ìN:
1. **Gesti√≥n de perfil**: Editar informaci√≥n personal, preferencias
2. **Torneos**: Inscripci√≥n, historial, pr√≥ximos eventos
3. **Estad√≠sticas**: Rendimiento, ranking, progreso
4. **Emparejamientos**: B√∫squeda de compa√±eros, equipos
5. **Instalaciones**: Reservas, disponibilidad, ubicaciones
6. **Configuraci√≥n**: Notificaciones, privacidad, cuenta

[Resto del contexto espec√≠fico para dashboard...]
`
}

interface ChatMessage {
  role: 'user' | 'assistant'
  content: string
}

export async function POST(request: NextRequest) {
  try {
    // Verificar API key
    if (!process.env.GEMINI_API_KEY) {
      console.error('GEMINI_API_KEY no est√° configurada')
      return NextResponse.json(
        { error: 'Configuraci√≥n del servidor incompleta' },
        { status: 500 }
      )
    }

    const body = await request.json()
    const { message, history = [], context = 'auth' } = body

    // Validar entrada
    if (!message || typeof message !== 'string') {
      return NextResponse.json(
        { error: 'Mensaje requerido' },
        { status: 400 }
      )
    }

    // Limitar longitud del mensaje
    if (message.length > 500) {
      return NextResponse.json(
        { error: 'Mensaje demasiado largo (m√°ximo 500 caracteres)' },
        { status: 400 }
      )
    }

    // Obtener contexto espec√≠fico
    const contextPrompt = CONTEXTS[context as keyof typeof CONTEXTS] || CONTEXTS.auth

    // Construir historial de conversaci√≥n
    const conversationHistory = history
      .slice(-10) // Limitar a √∫ltimos 10 mensajes para contexto
      .map((msg: ChatMessage) => `${msg.role === 'user' ? 'Usuario' : 'Asistente'}: ${msg.content}`)
      .join('\n')

    // Construir prompt completo
    const fullPrompt = `
${contextPrompt}

HISTORIAL DE CONVERSACI√ìN:
${conversationHistory}

MENSAJE ACTUAL DEL USUARIO:
${message}

RESPUESTA (como asistente de Padelnity):
`

    // Generar respuesta con Gemini
    const result = await model.generateContent(fullPrompt)
    const response = await result.response
    const text = response.text()

    // Validar respuesta
    if (!text || text.trim().length === 0) {
      throw new Error('Respuesta vac√≠a del modelo')
    }

    // Limpiar y formatear respuesta
    const cleanedResponse = text
      .trim()
      .replace(/^(Asistente:|Respuesta:)/i, '') // Remover prefijos
      .trim()

    return NextResponse.json({
      response: cleanedResponse,
      timestamp: new Date().toISOString()
    })

  } catch (error) {
    console.error('Error en API de chat:', error)

    // Respuesta de fallback espec√≠fica para diferentes tipos de error
    let fallbackMessage = 'Lo siento, ha ocurrido un error t√©cnico. Por favor, int√©ntalo de nuevo en unos momentos.'
    
    if (error instanceof Error) {
      if (error.message.includes('API_KEY')) {
        fallbackMessage = 'Servicio temporalmente no disponible. Contacta con soporte t√©cnico.'
      } else if (error.message.includes('quota') || error.message.includes('limit')) {
        fallbackMessage = 'Servicio temporalmente saturado. Por favor, int√©ntalo en unos minutos.'
      }
    }

    return NextResponse.json(
      { 
        error: 'Error interno del servidor',
        fallbackMessage,
        timestamp: new Date().toISOString()
      },
      { status: 500 }
    )
  }
}

// Manejar m√©todos no permitidos
export async function GET() {
  return NextResponse.json(
    { error: 'M√©todo no permitido' },
    { status: 405 }
  )
} 